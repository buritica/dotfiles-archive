# `e` with no arguments opens the current directory in Atom, otherwise
# opens the given location
function e() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

# `s` with no arguments cds into ~/src directory, otherwise opens the given subdir
function s() {
	if [ $# -eq 0 ]; then
		cd ~/src;
	else
		cd ~/src/"$@";
	fi;
}

# `dr` with no arguments cds into iCloud Drive  directory, otherwise opens the given subdir
function dr() {
	if [ $# -eq 0 ]; then
		cd ~/Library/Mobile\ Documents/com~apple~CloudDocs;
	else
		cd ~/Library/Mobile\ Documents/com~apple~CloudDocs/"$@";
	fi;
}

# `sp` with no arguments cds into ~/src/splice directory, otherwise opens the given subdir
function sp() {
	if [ $# -eq 0 ]; then
		cd ~/src/splice;
	else
		cd ~/src/splice/"$@";
	fi;
}


# node command with ./lib in NODE_PATH
lode() {
  NODE_PATH=./lib node $*
}

# nodemon command with ./lib in NODE_PATH
lodemon() {
  NODE_PATH=./lib nodemon $*
}

# empty commit as todo
todo() {
  git commit --allow-empty -m "TODO: $*"
}

# turn movie into gif
# thanx SlexAxton https://gist.github.com/SlexAxton/4989674
gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

# Simple calculator
function calc() {
  local result="";
  result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')";
  #                       └─ default (when `--mathlib` is used) is 20
  #
  if [[ "$result" == *.* ]]; then
    # improve the output for decimal numbers
    printf "$result" |
    sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
        -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
        -e 's/0*$//;s/\.$//';  # remove trailing zeros
  else
    printf "$result";
  fi;
  printf "\n";
}

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}


# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@";
  else
    du $arg .[^.]* *;
  fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
  function diff() {
    git diff --no-index --color-words "$@";
  }
fi;

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}";
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
  if [ -t 0 ]; then # argument
    python -mjson.tool <<< "$*" | pygmentize -l javascript;
  else # pipe
    python -mjson.tool | pygmentize -l javascript;
  fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
  if [ $# -eq 0 ]; then
    open .;
  else
    open "$@";
  fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}


#ride
# `p` with no arguments cds into ~/src/ride-product directory, otherwise opens the given subdir
function p() {
  if [ $# -eq 0 ]; then
    cd ~/src/ride-product;
  else
    cd ~/src/ride-product/"$@";
  fi;
}

# `r` with no arguments cds into ~/src/ride directory, otherwise opens the given subdir
function r() {
  if [ $# -eq 0 ]; then
    cd ~/src/ride;
  else
    cd ~/src/ride/"$@";
  fi;
}
